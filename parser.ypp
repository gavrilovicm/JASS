%{
#include<iostream>
#include<cstdlib>
#include<string>
#include<vector>
#include<cstring>
#include<cstdio>
#include"userinfo.hpp"
#include"matrix.hpp"

#define show_powerline {std::cout << *username << "::" << *wdir << ":->";}

extern int yylex();

void yyerror(std::string s){
	std::cerr << "Error occurred: " << s << std::endl;
}

std::string* username;
std::string* wdir;
bool matlab_mode = false;
%}

%union{
	int int_type;
	double double_type;
	char* s;
	Matrix* matrix_type;
	std::vector<double>* p_vector;
}

%left '+' '-'
%left '*' '/' '%'
%left UNMIN

%type<int_type> E
%type<double_type> number
%type<matrix_type> matlab_line array_rows
%type<p_vector> array_num row
%token<double_type> d_num_tok
%token<int_type> num_tok
%token<s> ls_flags_tok id_tok
%token clear_tok ls_tok pwd_tok chusername_tok exit_tok matlab_tok

%%

Program
	: Niz_linija
	;

Niz_linija
	: Niz_linija wLinija
	| wLinija
	;

wLinija
	: Linija '\n'{
		show_powerline
	}
	| '\n'{
		show_powerline
	}
	| error '\n' {
		/* TODO - show more userfriendly message */
		std::cout << "It has come to an error. Please rephrase.." << std::endl;
		show_powerline
	}
	| exit_tok {
		if (matlab_mode){
			std::cout << "Exit matlab mode."
			<< std::endl
			<< std::endl;
			wdir = getworkingdir(username);
			matlab_mode = false;
		}else{
			std::cerr << "exit" << std::endl;
			exit(EXIT_SUCCESS);
		}
	}
	| matlab_tok '\n' {
		if (!matlab_mode){
			std::cout << "Matlab mode active. Please see quick start in README.md for matlab."
			<< std::endl
			<< std::endl;
			wdir = new std::string("matlab-mode");
			matlab_mode = true;
		}
		show_powerline
	}
	;

Linija
	: E {std::cout << $1 << std::endl;}
	| clear_tok {clear();}
	| ls_tok ls_flags_tok {
		/* TODO - implement with system functions without system()*/
		if (strlen($2) > 10){
			std::cout   << "Too many flags sent.."<< std::endl;
		}else{
			char buffer[11];
			snprintf(buffer, sizeof(buffer), "ls %s", $2);
			system(buffer);
		}
	}
	| ls_tok {system("ls");}
	| pwd_tok {system("pwd");}
	| chusername_tok id_tok {
		delete username;
		username = new std::string($2);
	}
	| matlab_line {
		if (!matlab_mode){
			std::cout << "Matlab mode active. Please see quick start in README.md for matlab."
			<< std::endl
			<< std::endl;
			wdir = new std::string("matlab-mode");
			matlab_mode = true;
		}
		std::cout << *$1 << std::endl;
		delete $1;
	}
	;

E
	: E '+' E {$$ = $1 + $3;}
	| E '-' E {$$ = $1 - $3;}
	| E '*' E {$$ = $1 * $3;}
	| E '/' E {$$ = $1 / $3;}
	| E '%' E {$$ = $1 % $3;}
	| '(' E ')' {
		$$ = $2;
	}
	| '-' E %prec UNMIN {$$ = -$2;}
	| num_tok {
		$$ = $1;
	}
	;
matlab_line
	: '[' array_rows ']' {
		$$ = $2;
	}
	;

array_rows
	: array_rows ';' row {
		$$->add_to_matrix(*$3);
		delete $3;
	}
	| row {
		Matrix* m = new Matrix();
		m->add_to_matrix(*$1);
		$$ = m;
	}
	;

row
	: '[' array_num ']' {
		$$ = $2;
	}
	;

array_num
	: array_num ',' number {
		$$->push_back($3);
	}
	| number {
		std::vector<double>* new_vector = new std::vector<double>();
		new_vector->push_back($1);
		$$ = new_vector;
	}
	;

number
	: num_tok {
		$$ = $1;
	}
	| d_num_tok {
		$$ = $1;
	}
	;

%%

int main(){

	clear();

	username = getuserinfo();

	wdir = getworkingdir(username);

	show_powerline

	yyparse();
	delete username;
	exit(EXIT_SUCCESS);
}
